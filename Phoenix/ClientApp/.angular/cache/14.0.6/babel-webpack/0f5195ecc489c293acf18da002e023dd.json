{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Component, Inject } from '@angular/core';\nimport { VMService } from '../services/vm.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorService } from '../services/error.service';\nlet AwsComponent = class AwsComponent {\n  constructor(http, vmService, baseUrl) {\n    this.vmService = vmService;\n    this.vmService.getAllVMs().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    this.vmService.GetTemplates().subscribe(resultTemplates => {\n      this.templates = resultTemplates;\n    }, error => console.error(error));\n  }\n\n  CreateInstance() {}\n\n  CreateWindowsAD() {\n    this.vmService.CreateWindowsAD().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  confirmStartVM(id) {\n    this.vmService.StartInstance(id).subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  confirmStopVM(id) {\n    this.vmService.StopInstance(id).subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  GetAllVMs() {\n    this.vmService.getAllVMs().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n};\nAwsComponent = __decorate([Component({\n  selector: 'aws-component',\n  templateUrl: './aws.component.html',\n  styleUrls: ['./aws.component.css'],\n  providers: [VMService, ErrorService]\n}), __param(2, Inject('BASE_URL')), __metadata(\"design:paramtypes\", [HttpClient, VMService, String])], AwsComponent);\nexport { AwsComponent };\nexport class VmTemplateDialog {}","map":null,"metadata":{},"sourceType":"module"}