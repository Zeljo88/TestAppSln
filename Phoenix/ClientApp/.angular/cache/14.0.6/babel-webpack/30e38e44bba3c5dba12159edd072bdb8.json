{"ast":null,"code":"import { VMService } from '../services/vm.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorService } from '../services/error.service';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { merge, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/paginator\";\nimport * as i4 from \"@angular/material/progress-spinner\";\nimport * as i5 from \"@angular/material/sort\";\nimport * as i6 from \"@angular/material/table\";\n\nfunction AwsComponent_div_1_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nfunction AwsComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" GitHub's API rate limit has been reached. It will be reset in one minute. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AwsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, AwsComponent_div_1_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 15);\n    i0.ɵɵtemplate(2, AwsComponent_div_1_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isLoadingResults);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isRateLimitReached);\n  }\n}\n\nfunction AwsComponent_th_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"#\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AwsComponent_td_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r13.number);\n  }\n}\n\nfunction AwsComponent_th_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"Title\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AwsComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r14.title);\n  }\n}\n\nfunction AwsComponent_th_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1, \"State\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AwsComponent_td_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r15.state);\n  }\n}\n\nfunction AwsComponent_th_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 20);\n    i0.ɵɵtext(1, \" Created \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AwsComponent_td_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, row_r16.created_at));\n  }\n}\n\nfunction AwsComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 21);\n  }\n}\n\nfunction AwsComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 22);\n  }\n}\n\nexport let AwsComponent = /*#__PURE__*/(() => {\n  class AwsComponent {\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this.displayedColumns = ['created', 'state', 'number', 'title'];\n      this.data = [];\n      this.resultsLength = 0;\n      this.isLoadingResults = true;\n      this.isRateLimitReached = false;\n    }\n\n    ngAfterViewInit() {\n      this.exampleDatabase = new ExampleHttpDatabase(this._httpClient); // If the user changes the sort order, reset back to the first page.\n\n      this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n      merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n        this.isLoadingResults = true;\n        return this.exampleDatabase.getRepoIssues(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n      }), map(data => {\n        // Flip flag to show that loading has finished.\n        this.isLoadingResults = false;\n        this.isRateLimitReached = data === null;\n\n        if (data === null) {\n          return [];\n        } // Only refresh the result length if there is new data. In case of rate\n        // limit errors, we do not want to reset the paginator to zero, as that\n        // would prevent users from re-triggering requests.\n\n\n        this.resultsLength = data.total_count;\n        return data.items;\n      })).subscribe(data => this.data = data);\n    }\n\n  }\n\n  AwsComponent.ɵfac = function AwsComponent_Factory(t) {\n    return new (t || AwsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  AwsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AwsComponent,\n    selectors: [[\"aws-component\"]],\n    viewQuery: function AwsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([VMService, ErrorService])],\n    decls: 19,\n    vars: 6,\n    consts: [[1, \"example-container\", \"mat-elevation-z8\"], [\"class\", \"example-loading-shade\", 4, \"ngIf\"], [1, \"example-table-container\"], [\"mat-table\", \"\", \"matSort\", \"\", \"matSortActive\", \"created\", \"matSortDisableClear\", \"\", \"matSortDirection\", \"desc\", 1, \"example-table\", 3, \"dataSource\"], [\"matColumnDef\", \"number\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"title\"], [\"matColumnDef\", \"state\"], [\"matColumnDef\", \"created\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", \"disableClear\", \"\", 4, \"matHeaderCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"aria-label\", \"Select page of GitHub search results\", 3, \"length\", \"pageSize\"], [1, \"example-loading-shade\"], [4, \"ngIf\"], [\"class\", \"example-rate-limit-reached\", 4, \"ngIf\"], [1, \"example-rate-limit-reached\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", \"disableClear\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function AwsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, AwsComponent_div_1_Template, 3, 2, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"table\", 3);\n        i0.ɵɵelementContainerStart(4, 4);\n        i0.ɵɵtemplate(5, AwsComponent_th_5_Template, 2, 0, \"th\", 5);\n        i0.ɵɵtemplate(6, AwsComponent_td_6_Template, 2, 1, \"td\", 6);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(7, 7);\n        i0.ɵɵtemplate(8, AwsComponent_th_8_Template, 2, 0, \"th\", 5);\n        i0.ɵɵtemplate(9, AwsComponent_td_9_Template, 2, 1, \"td\", 6);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(10, 8);\n        i0.ɵɵtemplate(11, AwsComponent_th_11_Template, 2, 0, \"th\", 5);\n        i0.ɵɵtemplate(12, AwsComponent_td_12_Template, 2, 1, \"td\", 6);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(13, 9);\n        i0.ɵɵtemplate(14, AwsComponent_th_14_Template, 2, 0, \"th\", 10);\n        i0.ɵɵtemplate(15, AwsComponent_td_15_Template, 3, 3, \"td\", 6);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(16, AwsComponent_tr_16_Template, 1, 0, \"tr\", 11);\n        i0.ɵɵtemplate(17, AwsComponent_tr_17_Template, 1, 0, \"tr\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(18, \"mat-paginator\", 13);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingResults || ctx.isRateLimitReached);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.data);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"length\", ctx.resultsLength)(\"pageSize\", 30);\n      }\n    },\n    dependencies: [i2.NgIf, i3.MatPaginator, i4.MatProgressSpinner, i5.MatSort, i5.MatSortHeader, i6.MatTable, i6.MatHeaderCellDef, i6.MatHeaderRowDef, i6.MatColumnDef, i6.MatCellDef, i6.MatRowDef, i6.MatHeaderCell, i6.MatCell, i6.MatHeaderRow, i6.MatRow, i2.DatePipe],\n    styles: [\".startButton[_ngcontent-%COMP%]{background-color:#008a00!important;color:#fff!important}.mat-raised-button.mat-cancelBtn[_ngcontent-%COMP%]{background-color:#03440c;color:#fff;display:inline-flex;text-align:center}.stopButton[_ngcontent-%COMP%]{background-color:#bc1b06!important;color:#fff!important}.greenBackground[_ngcontent-%COMP%]{background-color:#07dd07!important}.redBackground[_ngcontent-%COMP%]{background-color:#bc1b06!important}\"]\n  });\n  /** An example database that the data source uses to retrieve data for the table. */\n\n  return AwsComponent;\n})();\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n  }\n\n  getRepoIssues(sort, order, page) {\n    const href = 'https://api.github.com/search/issues';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n    return this._httpClient.get(requestUrl);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}