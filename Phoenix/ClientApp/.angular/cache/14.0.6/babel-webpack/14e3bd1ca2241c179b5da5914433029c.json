{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Component, Inject } from '@angular/core';\nimport { VMService } from '../services/vm.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorService } from '../services/error.service';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nlet HomeComponent = class HomeComponent {\n  constructor(http, dialog, vmService, fb, baseUrl) {\n    this.dialog = dialog;\n    this.vmService = vmService;\n    this.fb = fb;\n    this.profileForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: [''],\n      address: this.fb.group({\n        street: [''],\n        city: [''],\n        state: [''],\n        zip: ['']\n      }),\n      aliases: this.fb.array([this.fb.control('')])\n    });\n    this.displayedColumns = ['instanceId', 'name', 'instanceType', 'state'];\n    this.selectedTemplate = 'option2';\n    this.vmService.getAllVMs().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    this.vmService.GetTemplates().subscribe(resultTemplates => {\n      this.templates = resultTemplates;\n    }, error => console.error(error));\n  }\n\n  CreateVM() {\n    this.dialog.open(CreatevmDialog);\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(CreatevmDialog, {\n      width: '250px'\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  CreateWindowsAD() {\n    this.vmService.CreateWindowsAD().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  confirmStartVM(id) {\n    this.vmService.StartInstance(id).subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  confirmStopVM(id) {\n    this.vmService.StopInstance(id).subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n  GetAllVMs() {\n    this.vmService.getAllVMs().subscribe(result => {\n      this.instances = result;\n    }, error => console.error(error));\n    window.location.reload();\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'home-component',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n  providers: [VMService, ErrorService]\n}), __param(4, Inject('BASE_URL')), __metadata(\"design:paramtypes\", [HttpClient, MatDialog, VMService, FormBuilder, String])], HomeComponent);\nexport { HomeComponent };\nexport let CreatevmDialog = /*#__PURE__*/(() => {\n  class CreatevmDialog {\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n\n    onCancelClick() {\n      this.dialog.close();\n    }\n\n  }\n\n  CreatevmDialog.ɵfac = function CreatevmDialog_Factory(t) {\n    return new (t || CreatevmDialog)(i0.ɵɵdirectiveInject(i1.MatDialogRef));\n  };\n\n  CreatevmDialog.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatevmDialog,\n    selectors: [[\"createvm-dialog\"]],\n    decls: 15,\n    vars: 2,\n    consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"first-name\"], [\"id\", \"first-name\", \"type\", \"text\", \"formControlName\", \"firstName\", \"required\", \"\"], [\"for\", \"last-name\"], [\"id\", \"last-name\", \"type\", \"text\", \"formControlName\", \"lastName\"], [\"type\", \"submit\", 3, \"disabled\"]],\n    template: function CreatevmDialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1, \"Dialog with elements\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtext(3, \"This dialog showcases the title, close, content and actions elements.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatevmDialog_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"label\", 3);\n        i0.ɵɵtext(6, \"First Name: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementStart(8, \"label\", 5);\n        i0.ɵɵtext(9, \"Last Name: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Complete the form to enable button.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵtext(14, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.profileForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", !ctx.profileForm.valid);\n      }\n    },\n    encapsulation: 2\n  });\n  return CreatevmDialog;\n})();","map":null,"metadata":{},"sourceType":"module"}