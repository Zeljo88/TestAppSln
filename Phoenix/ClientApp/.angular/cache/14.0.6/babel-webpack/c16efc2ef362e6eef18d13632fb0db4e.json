{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { ErrorService } from './error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport let VMService = /*#__PURE__*/(() => {\n  class VMService {\n    constructor(http, errorService, baseUrl) {\n      this.http = http;\n      this.errorService = errorService;\n      this.baseUrl = baseUrl;\n    }\n\n    getAllVMs() {\n      return this.http.get(this.baseUrl + 'vm').pipe(catchError(this.errorService.handleError));\n    }\n\n    StartInstance(id) {\n      return this.http.put(this.baseUrl + 'vm/start/' + id, null).pipe(catchError(this.errorService.handleError));\n    }\n\n    StopInstance(id) {\n      return this.http.put(this.baseUrl + 'vm/stop/' + id, null).pipe(catchError(this.errorService.handleError));\n    }\n\n    CreateWindowsAD() {\n      return this.http.post(this.baseUrl + 'stack', null).pipe(catchError(this.errorService.handleError));\n    }\n\n    GetTemplates() {\n      return this.http.get(this.baseUrl + 's3/buckets/templates', null).pipe(catchError(this.errorService.handleError));\n    }\n\n  }\n\n  VMService.ɵfac = function VMService_Factory(t) {\n    return new (t || VMService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject('BASE_URL'));\n  };\n\n  VMService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VMService,\n    factory: VMService.ɵfac\n  });\n  return VMService;\n})();","map":null,"metadata":{},"sourceType":"module"}