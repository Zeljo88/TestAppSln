{"ast":null,"code":"import { throwError as observableThrowError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ErrorService = /*#__PURE__*/(() => {\n  class ErrorService {\n    constructor() {}\n\n    notAuthenticatedError() {\n      return observableThrowError(new Error('You must be authenticated first.'));\n    }\n\n    handleCustomerError(error) {\n      const errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      return observableThrowError(new Error(errMsg));\n    }\n\n    handlePatchError(error) {\n      const errMsg = error.error ? `${error.error}` : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      return observableThrowError(new Error(errMsg));\n    }\n\n    handleError(error) {\n      const errMsg = error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      return observableThrowError(new Error(errMsg));\n    }\n\n    handleUserError(error) {\n      return observableThrowError(error.error);\n    }\n\n    customError(message) {\n      return observableThrowError(new Error(message));\n    }\n\n  }\n\n  ErrorService.ɵfac = function ErrorService_Factory(t) {\n    return new (t || ErrorService)();\n  };\n\n  ErrorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorService,\n    factory: ErrorService.ɵfac\n  });\n  return ErrorService;\n})();","map":null,"metadata":{},"sourceType":"module"}